import numpy

import monkdata as m

from dtree import *
# from drawtree import drawTree

def giveMeSomeSpace():
	print '_'*80 + '\n'

# Datasets
monks = {'monk-1':m.monk1, 'monk-2':m.monk2, 'monk-3':m.monk3}
monktests = {'monk-1':m.monk1test, 'monk-2':m.monk2test, 'monk-3':m.monk3test}

# Entropy
entropyTable = {}
for key in monks:
	entropyTable[key] = entropy(monks[key])

print "Entropy table"
for key in sorted(entropyTable):
	print key, '\t', entropyTable[key]
#print len([item.attribute[4] for item in m.monk1 if item.attribute[4] ==1])


# Information Gain
infoGainTable = {}
for key in sorted(monks):
	gains = []
	for a in m.attributes:
		gains.append(averageGain(monks[key], a))
	infoGainTable[key] = dict(zip(m.attributes, gains))

giveMeSomeSpace()
print "Information gain table"
line = ""
for a in m.attributes:
	line += '\t' + a.name
print line

for key in sorted(infoGainTable):
	line = key
	for a in sorted(infoGainTable[key]):
		line += '\t' + "{0:.5f}".format(infoGainTable[key][a])
	print line

# Best attribute for monk1 is A5, monk2 is A5, monk3 is A2
giveMeSomeSpace()
print "Best attributes for first split:"
for key in sorted(monks):
	print key, bestAttribute(monks[key], m.attributes)


# 2-level tree for monk1, built manually
class Split:
    "Represenation of data splits"
    def __init__(self):
        self.attribute = None
        self.subsets = {}

giveMeSomeSpace()

split1 = Split()
split1.attribute = bestAttribute(monks['monk-1'], m.attributes)
print "Creating a 2-level tree for monk-1"
print "\nBest attribute for split 1: ", split1.attribute
for v in split1.attribute.values:
	split1.subsets[v] = select(monks['monk-1'], split1.attribute, v)
	print " " + `split1.attribute`, '('+`v`+')', '#' + `len(split1.subsets[v])`

split2 = Split()
for value in split1.subsets:
	split2.attribute = bestAttribute(split1.subsets[value], [a for a in m.attributes if a!=split1.attribute])
	print "\n  Best attribute for split 2 (subset",split1.attribute,"=",`value`+"):", split2.attribute
	for v in split2.attribute.values:
		split2.subsets[v] = select(split1.subsets[value], split2.attribute, v)
		print "  ",split1.attribute,  '('+`value`+')', '-->', split2.attribute,  '('+`v`+')', '#' + `len(split2.subsets[v])`, '-->', mostCommon(split2.subsets[v])

# 2 levels tree for monk1 using buildTree
tree =  buildTree(monks['monk-1'], m.attributes, 2)
giveMeSomeSpace()
print "Tree generated by buildTree:", tree
print "Depth:", tree.depth()
print "Size:", tree.nodeCount()
# drawTree(tree)

# Full decision trees for all monks
giveMeSomeSpace()
print "Accuracies of the full decision trees, learning from 100% of the training data"
print "\t\tOn training\tOn testing"
for key in sorted(monks):
	tree = buildTree(monks[key], m.attributes)
	# print tree
	print '\t\t'.join(map(str, [key] + map("{0:.5f}".format, [check(tree, monks[key]), check(tree, monktests[key])])))

# Training and pruning
giveMeSomeSpace()
print "Full and pruned decision trees for all monks, learning from 60% of all the training data"
for key in sorted(monks):
	training, validation = partition(monks[key], 0.6)
	tree = buildTree(training, m.attributes)
	prunedTree = prune(tree, validation)
	print
	print '\t'.join([key,"Depth","Size", "Acc training", "Acc validation", "Acc testing"])
	print '\t'.join(map(str,["BEFORE",tree.depth(), tree.nodeCount()]+map("{0:.5f}\t".format,[check(tree, training), check(tree, validation), check(tree, monktests[key])])))
	print '\t'.join(map(str,["PRUNED",prunedTree.depth(), tree.nodeCount()]+map("{0:.5f}\t".format,[check(prunedTree, training), check(prunedTree, validation), check(prunedTree, monktests[key])])))

# Testing different ratios for training and validation
giveMeSomeSpace()
print "Testing different ratios for splitting the training data over actual training and validation for pruning"
for key in sorted(monks):
	print
	print '\t'.join([key,"Ratio","Full", "Pruned", "Improvement"])
	for fraction in [0.3, 0.4, 0.5, 0.6, 0.7, 0.8]:
		training, validation = partition(monks[key], fraction)
		tree = buildTree(training, m.attributes)
		prunedTree = prune(tree, validation)
		acc1 = check(tree, monktests[key])
		acc2 = check(prunedTree, monktests[key])
		print '\t'.join(["      ",`fraction`] + map("{0:.5f}".format,[acc1, acc2, (acc2-acc1)/acc2]))
